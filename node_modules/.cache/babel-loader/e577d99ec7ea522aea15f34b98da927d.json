{"ast":null,"code":"import AccountIngress from '../chain/abis/AccountIngress.json';\nimport NodeIngress from '../chain/abis/NodeIngress.json';\n\nconst loadConfig = async () => {\n  // production loader\n  if (process.env.NODE_ENV === 'production') {\n    const response = await fetch('config.json');\n\n    if (response.ok) {\n      return response.json().catch(reason => {\n        console.log('config parsing failed with error:', reason);\n        throw new Error('Config parsing failed with error: ' + reason);\n      });\n    } else {\n      console.log('Failed to load config file');\n      throw new Error('Config file not found');\n    } // development defaults\n\n  } else {\n    // ganache vs besu\n    // if env variables exists, then we will assume we are connecting to besu, otherwise we will assume ganache\n    let accountIngressAddress = process.env.REACT_APP_ACCOUNT_INGRESS_CONTRACT_ADDRESS;\n    let nodeIngressAddress = process.env.REACT_APP_NODE_INGRESS_CONTRACT_ADDRESS;\n    let networkId = process.env.REACT_APP_CHAIN_ID;\n\n    if (accountIngressAddress) {\n      console.log('Using environment variables for contract addresses and network id'); //make sure other two are also defined\n\n      if (!nodeIngressAddress) {\n        throw new Error('Node Ingress Address environment variable is missing');\n      }\n\n      if (!networkId) {\n        throw new Error('Network Id environment variable is missing');\n      }\n\n      return {\n        accountIngressAddress,\n        nodeIngressAddress,\n        networkId\n      };\n    }\n\n    console.log('Using truffle (develop) defaults'); // We're cheating here by knowing what truffle will write when it's running a ganache server.\n    // We're forcing the types because we know what the network entry in the json file will look like so long as it's there.\n\n    const accountIngressNetworks = Object.values(AccountIngress.networks);\n\n    if (accountIngressNetworks.length === 0) {\n      throw new Error(\"Account Ingress Contract abi doesn't contain any networks, probably not deployed\");\n    }\n\n    accountIngressAddress = accountIngressNetworks[0].address;\n    const nodeIngressNetworks = Object.values(NodeIngress.networks);\n\n    if (nodeIngressNetworks.length === 0) {\n      throw new Error(\"Node Ingress Contract abi doesn't contain any networks, probably not deployed\");\n    }\n\n    nodeIngressAddress = nodeIngressNetworks[0].address; // if we haven't errored by this point then we're being driven by env and until we do it better we should accept any network\n\n    const nodeIngressNetworkId = Object.keys(NodeIngress.networks)[0] ? Object.keys(NodeIngress.networks)[0] : 'any';\n    return {\n      accountIngressAddress,\n      nodeIngressAddress,\n      networkId: nodeIngressNetworkId\n    };\n  }\n};\n\nexport const configPromise = loadConfig();","map":{"version":3,"sources":["C:/Users/Julia/Desktop/permissioning-smart-contracts-master/permissioning-smart-contracts-master/src/util/configLoader.ts"],"names":["AccountIngress","NodeIngress","loadConfig","process","env","NODE_ENV","response","fetch","ok","json","catch","reason","console","log","Error","accountIngressAddress","REACT_APP_ACCOUNT_INGRESS_CONTRACT_ADDRESS","nodeIngressAddress","REACT_APP_NODE_INGRESS_CONTRACT_ADDRESS","networkId","REACT_APP_CHAIN_ID","accountIngressNetworks","Object","values","networks","length","address","nodeIngressNetworks","nodeIngressNetworkId","keys","configPromise"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,mCAA3B;AACA,OAAOC,WAAP,MAAwB,gCAAxB;;AAQA,MAAMC,UAAU,GAAG,YAA6B;AAC9C;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAD,CAA5B;;AAEA,QAAID,QAAQ,CAACE,EAAb,EAAiB;AACf,aAAOF,QAAQ,CAACG,IAAT,GAAgBC,KAAhB,CAAuBC,MAAD,IAAiB;AAC5CC,QAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDF,MAAjD;AACA,cAAM,IAAIG,KAAJ,CAAU,uCAAuCH,MAAjD,CAAN;AACD,OAHM,CAAP;AAID,KALD,MAKO;AACLC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,YAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD,KAXwC,CAYzC;;AACD,GAbD,MAaO;AACL;AACA;AACA,QAAIC,qBAAqB,GAAGZ,OAAO,CAACC,GAAR,CAAYY,0CAAxC;AACA,QAAIC,kBAAkB,GAAGd,OAAO,CAACC,GAAR,CAAYc,uCAArC;AACA,QAAIC,SAAS,GAAGhB,OAAO,CAACC,GAAR,CAAYgB,kBAA5B;;AAEA,QAAIL,qBAAJ,EAA2B;AACzBH,MAAAA,OAAO,CAACC,GAAR,CAAY,mEAAZ,EADyB,CAEzB;;AACA,UAAI,CAACI,kBAAL,EAAyB;AACvB,cAAM,IAAIH,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED,UAAI,CAACK,SAAL,EAAgB;AACd,cAAM,IAAIL,KAAJ,CAAU,4CAAV,CAAN;AACD;;AAED,aAAO;AAAEC,QAAAA,qBAAF;AAAyBE,QAAAA,kBAAzB;AAA6CE,QAAAA;AAA7C,OAAP;AACD;;AAEDP,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EArBK,CAsBL;AACA;;AACA,UAAMQ,sBAAsB,GAAGC,MAAM,CAACC,MAAP,CAAcvB,cAAc,CAACwB,QAA7B,CAA/B;;AACA,QAAIH,sBAAsB,CAACI,MAAvB,KAAkC,CAAtC,EAAyC;AACvC,YAAM,IAAIX,KAAJ,CAAU,kFAAV,CAAN;AACD;;AACDC,IAAAA,qBAAqB,GAAIM,sBAAsB,CAAC,CAAD,CAAvB,CAAmDK,OAA3E;AAEA,UAAMC,mBAAmB,GAAGL,MAAM,CAACC,MAAP,CAActB,WAAW,CAACuB,QAA1B,CAA5B;;AACA,QAAIG,mBAAmB,CAACF,MAApB,KAA+B,CAAnC,EAAsC;AACpC,YAAM,IAAIX,KAAJ,CAAU,+EAAV,CAAN;AACD;;AACDG,IAAAA,kBAAkB,GAAIU,mBAAmB,CAAC,CAAD,CAApB,CAAgDD,OAArE,CAlCK,CAoCL;;AACA,UAAME,oBAAoB,GAAGN,MAAM,CAACO,IAAP,CAAY5B,WAAW,CAACuB,QAAxB,EAAkC,CAAlC,IACxBF,MAAM,CAACO,IAAP,CAAY5B,WAAW,CAACuB,QAAxB,EAAkC,CAAlC,CADwB,GAEzB,KAFJ;AAIA,WAAO;AAAET,MAAAA,qBAAF;AAAyBE,MAAAA,kBAAzB;AAA6CE,MAAAA,SAAS,EAAES;AAAxD,KAAP;AACD;AACF,CA1DD;;AA4DA,OAAO,MAAME,aAAa,GAAG5B,UAAU,EAAhC","sourcesContent":["import AccountIngress from '../chain/abis/AccountIngress.json';\nimport NodeIngress from '../chain/abis/NodeIngress.json';\n\nexport type Config = {\n  accountIngressAddress: string;\n  nodeIngressAddress: string;\n  networkId: string;\n};\n\nconst loadConfig = async (): Promise<Config> => {\n  // production loader\n  if (process.env.NODE_ENV === 'production') {\n    const response = await fetch('config.json');\n\n    if (response.ok) {\n      return response.json().catch((reason: any) => {\n        console.log('config parsing failed with error:', reason);\n        throw new Error('Config parsing failed with error: ' + reason);\n      });\n    } else {\n      console.log('Failed to load config file');\n      throw new Error('Config file not found');\n    }\n    // development defaults\n  } else {\n    // ganache vs besu\n    // if env variables exists, then we will assume we are connecting to besu, otherwise we will assume ganache\n    let accountIngressAddress = process.env.REACT_APP_ACCOUNT_INGRESS_CONTRACT_ADDRESS;\n    let nodeIngressAddress = process.env.REACT_APP_NODE_INGRESS_CONTRACT_ADDRESS;\n    let networkId = process.env.REACT_APP_CHAIN_ID;\n\n    if (accountIngressAddress) {\n      console.log('Using environment variables for contract addresses and network id');\n      //make sure other two are also defined\n      if (!nodeIngressAddress) {\n        throw new Error('Node Ingress Address environment variable is missing');\n      }\n\n      if (!networkId) {\n        throw new Error('Network Id environment variable is missing');\n      }\n\n      return { accountIngressAddress, nodeIngressAddress, networkId };\n    }\n\n    console.log('Using truffle (develop) defaults');\n    // We're cheating here by knowing what truffle will write when it's running a ganache server.\n    // We're forcing the types because we know what the network entry in the json file will look like so long as it's there.\n    const accountIngressNetworks = Object.values(AccountIngress.networks);\n    if (accountIngressNetworks.length === 0) {\n      throw new Error(\"Account Ingress Contract abi doesn't contain any networks, probably not deployed\");\n    }\n    accountIngressAddress = (accountIngressNetworks[0] as { address: string }).address;\n\n    const nodeIngressNetworks = Object.values(NodeIngress.networks);\n    if (nodeIngressNetworks.length === 0) {\n      throw new Error(\"Node Ingress Contract abi doesn't contain any networks, probably not deployed\");\n    }\n    nodeIngressAddress = (nodeIngressNetworks[0] as { address: string }).address;\n\n    // if we haven't errored by this point then we're being driven by env and until we do it better we should accept any network\n    const nodeIngressNetworkId = Object.keys(NodeIngress.networks)[0]\n      ? (Object.keys(NodeIngress.networks)[0] as string)\n      : 'any';\n\n    return { accountIngressAddress, nodeIngressAddress, networkId: nodeIngressNetworkId };\n  }\n};\n\nexport const configPromise = loadConfig();\n"]},"metadata":{},"sourceType":"module"}