{"ast":null,"code":"// Libs\nimport { useState, useEffect } from 'react'; // Hooks\n\nimport useModal from './useModal';\nimport { useToast } from '../../context/toasts';\nimport useTransaction from './useTransaction'; // Utils\n\nimport { arrayInclude, areArrayEqual, areMapEqual } from '../../util/array'; // Constants\n\nimport { PENDING_ADDITION, PENDING_REMOVAL, FAIL_ADDITION, FAIL_REMOVAL } from '../../constants/transactions';\nexport default ((originalList, identifierToParams) => {\n  const [list, setList] = useState(originalList);\n  const {\n    modals,\n    toggleModal\n  } = useModal();\n  const {\n    transactions,\n    addTransaction,\n    updateTransaction,\n    deleteTransaction,\n    setTransactions\n  } = useTransaction();\n  const {\n    openToast,\n    updateToast,\n    closeToast\n  } = useToast();\n  useEffect(() => {\n    const updatedTransactions = new Map(transactions); // Delete old pending removals\n\n    transactions.forEach((status, identifier) => {\n      if (status === PENDING_REMOVAL && !arrayInclude(originalList, {\n        identifier\n      })) {\n        updatedTransactions.delete(identifier);\n      }\n    }); // Derive list and delete old pending additions\n\n    const derivedList = originalList.map(i => {\n      if (updatedTransactions.has(i.identifier)) {\n        const status = updatedTransactions.get(i.identifier);\n\n        if (status === PENDING_ADDITION || status === FAIL_ADDITION && i.status === 'active' || status === FAIL_REMOVAL && i.status === 'active') {\n          updatedTransactions.delete(i.identifier);\n        } else {\n          return { ...i,\n            status\n          };\n        }\n      }\n\n      return i;\n    }); // Gather the pending and failed additions from updatedTransactions\n\n    const pending = [];\n    updatedTransactions.forEach((status, identifier) => {\n      if (status === PENDING_ADDITION || status === FAIL_ADDITION) {\n        pending.push({\n          identifier,\n          status,\n          ...identifierToParams(identifier)\n        });\n      }\n    });\n    const updatedList = [...pending, ...derivedList];\n\n    if (!areArrayEqual(updatedList, list, ['identifier', 'status'])) {\n      setList(updatedList);\n    }\n\n    if (!areMapEqual(updatedTransactions, transactions)) {\n      setTransactions(updatedTransactions);\n    }\n  }, [transactions, originalList, list, identifierToParams, setTransactions, deleteTransaction]);\n  return {\n    list,\n    modals,\n    toggleModal,\n    transactions,\n    addTransaction,\n    updateTransaction,\n    deleteTransaction,\n    openToast,\n    updateToast,\n    closeToast\n  };\n});","map":{"version":3,"sources":["C:/Users/Julia/Desktop/permissioning-smart-contracts-master/permissioning-smart-contracts-master/src/containers/Tabs/useTab.ts"],"names":["useState","useEffect","useModal","useToast","useTransaction","arrayInclude","areArrayEqual","areMapEqual","PENDING_ADDITION","PENDING_REMOVAL","FAIL_ADDITION","FAIL_REMOVAL","originalList","identifierToParams","list","setList","modals","toggleModal","transactions","addTransaction","updateTransaction","deleteTransaction","setTransactions","openToast","updateToast","closeToast","updatedTransactions","Map","forEach","status","identifier","delete","derivedList","map","i","has","get","pending","push","updatedList"],"mappings":"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","sourcesContent":["// Libs\nimport { useState, useEffect } from 'react';\n// Hooks\nimport useModal from './useModal';\nimport { useToast } from '../../context/toasts';\nimport useTransaction from './useTransaction';\n// Utils\nimport { arrayInclude, areArrayEqual, areMapEqual } from '../../util/array';\n// Constants\nimport { PENDING_ADDITION, PENDING_REMOVAL, FAIL_ADDITION, FAIL_REMOVAL } from '../../constants/transactions';\n\ntype IdentAndStatus = {\n  identifier: string;\n  status: string;\n};\n\nexport default <T>(originalList: (T & IdentAndStatus)[], identifierToParams: (identifier: string) => T) => {\n  const [list, setList] = useState(originalList);\n  const { modals, toggleModal } = useModal();\n  const { transactions, addTransaction, updateTransaction, deleteTransaction, setTransactions } = useTransaction();\n  const { openToast, updateToast, closeToast } = useToast();\n\n  useEffect(() => {\n    const updatedTransactions = new Map(transactions);\n    // Delete old pending removals\n    transactions.forEach((status, identifier) => {\n      if (status === PENDING_REMOVAL && !arrayInclude(originalList, { identifier })) {\n        updatedTransactions.delete(identifier);\n      }\n    });\n    // Derive list and delete old pending additions\n    const derivedList = originalList.map(i => {\n      if (updatedTransactions.has(i.identifier)) {\n        const status = updatedTransactions.get(i.identifier)!;\n        if (\n          status === PENDING_ADDITION ||\n          (status === FAIL_ADDITION && i.status === 'active') ||\n          (status === FAIL_REMOVAL && i.status === 'active')\n        ) {\n          updatedTransactions.delete(i.identifier);\n        } else {\n          return { ...i, status };\n        }\n      }\n      return i;\n    });\n    // Gather the pending and failed additions from updatedTransactions\n    const pending: (T & IdentAndStatus)[] = [];\n    updatedTransactions.forEach((status, identifier) => {\n      if (status === PENDING_ADDITION || status === FAIL_ADDITION) {\n        pending.push({\n          identifier,\n          status,\n          ...identifierToParams(identifier)\n        });\n      }\n    });\n\n    const updatedList = [...pending, ...derivedList];\n\n    if (!areArrayEqual(updatedList, list, ['identifier', 'status'])) {\n      setList(updatedList);\n    }\n    if (!areMapEqual(updatedTransactions, transactions)) {\n      setTransactions(updatedTransactions);\n    }\n  }, [transactions, originalList, list, identifierToParams, setTransactions, deleteTransaction]);\n\n  return {\n    list,\n    modals,\n    toggleModal,\n    transactions,\n    addTransaction,\n    updateTransaction,\n    deleteTransaction,\n    openToast,\n    updateToast,\n    closeToast\n  };\n};\n"]},"metadata":{},"sourceType":"module"}