{"ast":null,"code":"import { ethers } from 'ethers';\nimport Web3 from 'web3';\nlet provider = undefined;\nlet web3 = undefined;\n\nconst web3Factory = async () => {\n  if (web3) return web3;\n\n  if (window.ethereum) {\n    await window.ethereum.enable();\n  }\n\n  web3 = new Web3(Web3.givenProvider);\n  return web3;\n};\n\nexport const providerFactory = async () => {\n  if (provider) return provider;\n  const web3 = await web3Factory();\n  provider = new ethers.providers.Web3Provider(web3.currentProvider).getSigner();\n  return provider;\n};\nexport const listenForAccountChange = async callback => {\n  const web3 = await web3Factory();\n  let account = (await web3.eth.getAccounts())[0];\n  setInterval(async function () {\n    const newAccount = (await web3.eth.getAccounts())[0];\n\n    if (newAccount !== account) {\n      account = newAccount;\n      callback(account);\n    }\n  }, 100);\n};","map":{"version":3,"sources":["C:/Users/Julia/Desktop/permissioning-smart-contracts-master/permissioning-smart-contracts-master/src/chain/provider.ts"],"names":["ethers","Web3","provider","undefined","web3","web3Factory","window","ethereum","enable","givenProvider","providerFactory","providers","Web3Provider","currentProvider","getSigner","listenForAccountChange","callback","account","eth","getAccounts","setInterval","newAccount"],"mappings":"AACA,SAASA,MAAT,QAA+B,QAA/B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,IAAIC,QAAuC,GAAGC,SAA9C;AACA,IAAIC,IAAsB,GAAGD,SAA7B;;AAGA,MAAME,WAAW,GAAG,YAAY;AAC9B,MAAID,IAAJ,EAAU,OAAOA,IAAP;;AAEV,MAAIE,MAAM,CAACC,QAAX,EAAqB;AACnB,UAAMD,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAAN;AACD;;AAEDJ,EAAAA,IAAI,GAAG,IAAIH,IAAJ,CAASA,IAAI,CAACQ,aAAd,CAAP;AACA,SAAOL,IAAP;AACD,CATD;;AAWA,OAAO,MAAMM,eAAe,GAAG,YAAY;AACzC,MAAIR,QAAJ,EAAc,OAAOA,QAAP;AAEd,QAAME,IAAI,GAAG,MAAMC,WAAW,EAA9B;AACAH,EAAAA,QAAQ,GAAG,IAAIF,MAAM,CAACW,SAAP,CAAiBC,YAArB,CAAkCR,IAAI,CAACS,eAAvC,EAAyEC,SAAzE,EAAX;AAEA,SAAOZ,QAAP;AACD,CAPM;AASP,OAAO,MAAMa,sBAAsB,GAAG,MAAOC,QAAP,IAA+C;AACnF,QAAMZ,IAAI,GAAG,MAAMC,WAAW,EAA9B;AACA,MAAIY,OAAO,GAAG,CAAC,MAAMb,IAAI,CAACc,GAAL,CAASC,WAAT,EAAP,EAA+B,CAA/B,CAAd;AACAC,EAAAA,WAAW,CAAC,kBAAiB;AAC3B,UAAMC,UAAU,GAAG,CAAC,MAAMjB,IAAI,CAACc,GAAL,CAASC,WAAT,EAAP,EAA+B,CAA/B,CAAnB;;AACA,QAAIE,UAAU,KAAKJ,OAAnB,EAA4B;AAC1BA,MAAAA,OAAO,GAAGI,UAAV;AACAL,MAAAA,QAAQ,CAACC,OAAD,CAAR;AACD;AACF,GANU,EAMR,GANQ,CAAX;AAOD,CAVM","sourcesContent":["import { Provider, AsyncSendable } from 'ethers/providers';\nimport { ethers, Signer } from 'ethers';\nimport Web3 from 'web3';\n\nlet provider: Provider | Signer | undefined = undefined;\nlet web3: Web3 | undefined = undefined;\ndeclare let window: any;\n\nconst web3Factory = async () => {\n  if (web3) return web3;\n\n  if (window.ethereum) {\n    await window.ethereum.enable();\n  }\n\n  web3 = new Web3(Web3.givenProvider);\n  return web3;\n};\n\nexport const providerFactory = async () => {\n  if (provider) return provider;\n\n  const web3 = await web3Factory();\n  provider = new ethers.providers.Web3Provider(web3.currentProvider as AsyncSendable).getSigner();\n\n  return provider;\n};\n\nexport const listenForAccountChange = async (callback: (address: string) => void) => {\n  const web3 = await web3Factory();\n  let account = (await web3.eth.getAccounts())[0];\n  setInterval(async function() {\n    const newAccount = (await web3.eth.getAccounts())[0];\n    if (newAccount !== account) {\n      account = newAccount;\n      callback(account);\n    }\n  }, 100);\n};\n"]},"metadata":{},"sourceType":"module"}