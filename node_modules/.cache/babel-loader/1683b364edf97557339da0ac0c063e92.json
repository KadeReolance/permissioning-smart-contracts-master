{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia\\\\Desktop\\\\permissioning-smart-contracts-master\\\\permissioning-smart-contracts-master\\\\src\\\\context\\\\network.tsx\";\n// Libs\nimport React, { useContext, useEffect, useState, createContext, useMemo } from 'react';\nimport { useConfig } from '../context/configData';\nimport { providerFactory } from '../chain/provider';\nimport { accountIngressFactory } from '../chain/contracts/AccountIngress';\nimport { nodeIngressFactory } from '../chain/contracts/NodeIngress';\nconst NetworkContext = createContext(undefined);\n/**\n * Provider for the network context that contains informations about the\n * blockchain provider\n */\n\nexport const NetworkProvider = props => {\n  const [accountIngressContract, setAccountIngressContract] = useState(undefined);\n  const [nodeIngressContract, setNodeIngressContract] = useState(undefined);\n  const [networkId, setNetworkId] = useState(undefined);\n  const config = useConfig();\n  useEffect(() => {\n    providerFactory().then(provider => {\n      accountIngressFactory(config, provider).then(accountIngress => setAccountIngressContract(accountIngress));\n      nodeIngressFactory(config, provider).then(nodeIngress => setNodeIngressContract(nodeIngress));\n    });\n  }, [config]);\n  const value = useMemo(() => ({\n    networkId,\n    setNetworkId,\n    contracts: {\n      accountIngressContract,\n      setAccountIngressContract,\n      nodeIngressContract,\n      setNodeIngressContract\n    }\n  }), [accountIngressContract, setAccountIngressContract, nodeIngressContract, setNodeIngressContract, networkId, setNetworkId]);\n  return /*#__PURE__*/React.createElement(NetworkContext.Provider, Object.assign({\n    value: value\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 10\n    }\n  }));\n};\n/**\n * Synchronize with the blockchain network\n * @return {Object} The network informations:\n *  - isCorrectNetwork: true if the detected network is one of the allowed\n *  networks by the contracts, false if it is not, null if there is no detected\n *  network,\n *  - networkId: The id of the network,\n */\n\nexport const useNetwork = () => {\n  const context = useContext(NetworkContext);\n\n  if (!context) {\n    throw new Error('useNetwork must be used within a DataProvider.');\n  }\n\n  const config = useConfig();\n  const {\n    contracts,\n    networkId,\n    setNetworkId\n  } = context;\n  useEffect(() => {\n    const ingress = contracts.accountIngressContract || contracts.nodeIngressContract;\n\n    if (ingress === undefined) {\n      setNetworkId(undefined);\n    } else {\n      ingress.provider.getNetwork().then(network => setNetworkId(network.chainId));\n    }\n  }, [contracts.accountIngressContract, contracts.nodeIngressContract, setNetworkId]);\n  const isCorrectNetwork = useMemo(() => {\n    if (networkId === undefined) {\n      return undefined;\n    } else {\n      return config.networkId === 'any' || networkId.toString() === config.networkId;\n    }\n  }, [networkId, config.networkId]);\n  return {\n    isCorrectNetwork,\n    networkId,\n    accountIngressContract: contracts.accountIngressContract,\n    nodeIngressContract: contracts.nodeIngressContract\n  };\n};","map":{"version":3,"sources":["C:/Users/Julia/Desktop/permissioning-smart-contracts-master/permissioning-smart-contracts-master/src/context/network.tsx"],"names":["React","useContext","useEffect","useState","createContext","useMemo","useConfig","providerFactory","accountIngressFactory","nodeIngressFactory","NetworkContext","undefined","NetworkProvider","props","accountIngressContract","setAccountIngressContract","nodeIngressContract","setNodeIngressContract","networkId","setNetworkId","config","then","provider","accountIngress","nodeIngress","value","contracts","useNetwork","context","Error","ingress","getNetwork","network","chainId","isCorrectNetwork","toString"],"mappings":"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","sourcesContent":["// Libs\nimport React, { useContext, useEffect, useState, createContext, useMemo } from 'react';\nimport { useConfig } from '../context/configData';\n\nimport { providerFactory } from '../chain/provider';\nimport { AccountIngress } from '../chain/@types/AccountIngress';\nimport { accountIngressFactory } from '../chain/contracts/AccountIngress';\nimport { NodeIngress } from '../chain/@types/NodeIngress';\nimport { nodeIngressFactory } from '../chain/contracts/NodeIngress';\n\ntype ContextType =\n  | {\n      networkId?: number;\n      setNetworkId: React.Dispatch<React.SetStateAction<number | undefined>>;\n      contracts: {\n        accountIngressContract?: AccountIngress;\n        setAccountIngressContract: React.Dispatch<React.SetStateAction<AccountIngress | undefined>>;\n        nodeIngressContract?: NodeIngress;\n        setNodeIngressContract: React.Dispatch<React.SetStateAction<NodeIngress | undefined>>;\n      };\n    }\n  | undefined;\n\nconst NetworkContext = createContext<ContextType>(undefined);\n\n/**\n * Provider for the network context that contains informations about the\n * blockchain provider\n */\nexport const NetworkProvider: React.FC<{}> = props => {\n  const [accountIngressContract, setAccountIngressContract] = useState<AccountIngress | undefined>(undefined);\n  const [nodeIngressContract, setNodeIngressContract] = useState<NodeIngress | undefined>(undefined);\n  const [networkId, setNetworkId] = useState<number | undefined>(undefined);\n\n  const config = useConfig();\n\n  useEffect(() => {\n    providerFactory().then(provider => {\n      accountIngressFactory(config, provider).then(accountIngress => setAccountIngressContract(accountIngress));\n      nodeIngressFactory(config, provider).then(nodeIngress => setNodeIngressContract(nodeIngress));\n    });\n  }, [config]);\n\n  const value = useMemo(\n    () => ({\n      networkId,\n      setNetworkId,\n      contracts: {\n        accountIngressContract,\n        setAccountIngressContract,\n        nodeIngressContract,\n        setNodeIngressContract\n      }\n    }),\n    [\n      accountIngressContract,\n      setAccountIngressContract,\n      nodeIngressContract,\n      setNodeIngressContract,\n      networkId,\n      setNetworkId\n    ]\n  );\n\n  return <NetworkContext.Provider value={value} {...props} />;\n};\n\n/**\n * Synchronize with the blockchain network\n * @return {Object} The network informations:\n *  - isCorrectNetwork: true if the detected network is one of the allowed\n *  networks by the contracts, false if it is not, null if there is no detected\n *  network,\n *  - networkId: The id of the network,\n */\nexport const useNetwork = () => {\n  const context = useContext(NetworkContext);\n  if (!context) {\n    throw new Error('useNetwork must be used within a DataProvider.');\n  }\n\n  const config = useConfig();\n\n  const { contracts, networkId, setNetworkId } = context;\n\n  useEffect(() => {\n    const ingress = contracts.accountIngressContract || contracts.nodeIngressContract;\n    if (ingress === undefined) {\n      setNetworkId(undefined);\n    } else {\n      ingress.provider.getNetwork().then(network => setNetworkId(network.chainId));\n    }\n  }, [contracts.accountIngressContract, contracts.nodeIngressContract, setNetworkId]);\n\n  const isCorrectNetwork = useMemo(() => {\n    if (networkId === undefined) {\n      return undefined;\n    } else {\n      return config.networkId === 'any' || networkId.toString() === config.networkId;\n    }\n  }, [networkId, config.networkId]);\n\n  return {\n    isCorrectNetwork,\n    networkId,\n    accountIngressContract: contracts.accountIngressContract,\n    nodeIngressContract: contracts.nodeIngressContract\n  };\n};\n"]},"metadata":{},"sourceType":"module"}