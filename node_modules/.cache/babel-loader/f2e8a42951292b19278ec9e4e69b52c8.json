{"ast":null,"code":"const leftPad = require('left-pad');\n\nconst padIpv6 = require('pad-ipv6');\n\nexport const enodeToParams = enodeURL => {\n  let enodeHigh = '';\n  let enodeLow = '';\n  let ip = '';\n  let port = '';\n  let extraParams = new Map();\n\n  try {\n    const node = new URL(enodeURL);\n\n    if (node.protocol === 'enode:') {\n      // Change to Special protocol in order to parse the fields properly\n      node.protocol = 'https';\n\n      if (node.username.length === 128) {\n        enodeHigh = '0x' + node.username.slice(0, 64);\n        enodeLow = '0x' + node.username.slice(64);\n      }\n\n      ip = parseHostname(node.hostname);\n      port = node.port;\n      node.searchParams.forEach((value, name, searchParams) => {\n        extraParams.set(name.toLowerCase(), value);\n      });\n    }\n  } catch (err) {}\n\n  return {\n    enodeHigh,\n    enodeLow,\n    ip,\n    port,\n    extraParams\n  };\n};\nexport const paramsToIdentifier = ({\n  enodeHigh,\n  enodeLow,\n  ip,\n  port\n}) => {\n  return `${enodeHigh}_${enodeLow}_${ip}_${port}`;\n};\n\nfunction parseHostname(stringHostname) {\n  if (stringHostname[0] === '[') {\n    const ipv6 = stringHostname.slice(1, -1);\n    return getHexIpv6(ipv6);\n  }\n\n  return getHexIpv4(stringHostname);\n}\n\nfunction getHexIpv4(stringIp) {\n  const splitIp = stringIp.split('.');\n  return `0x00000000000000000000ffff${toHex(splitIp[0])}${toHex(splitIp[1])}${toHex(splitIp[2])}${toHex(splitIp[3])}`;\n}\n\nfunction getHexIpv6(stringIpv6) {\n  const ipv6 = padIpv6(stringIpv6).split(':').join('');\n  return '0x' + ipv6;\n}\n\nfunction toHex(number) {\n  const num = Number(number).toString(16);\n  return leftPad(num, 2, '0');\n}\n\nexport const buildEnode = (enodeHigh, enodeLow) => {\n  return `${enodeHigh.slice(2)}${enodeLow.slice(2)}`;\n};\nexport const identifierToParams = identifier => {\n  const [enodeHigh, enodeLow, ip, port] = identifier.split('_');\n  return {\n    enodeHigh,\n    enodeLow,\n    ip,\n    port,\n    identifier\n  };\n};\nexport const identifierToEnodeHighAndLow = identifier => {\n  if (identifier) {\n    const [enodeHigh, enodeLow] = identifier.split('_');\n    return `${enodeHigh}${enodeLow}`;\n  }\n\n  return '';\n};\nexport const isValidEnode = str => {\n  return !Object.values(enodeToParams(str)).some(value => !value);\n};\nexport const isEqual = (node1, node2) => {\n  return node1.enodeHigh.toLowerCase() === node2.enodeHigh.toLowerCase() && node1.enodeLow.toLowerCase() === node2.enodeLow.toLowerCase() && node1.ip === node2.ip && node1.port === node2.port;\n};","map":{"version":3,"sources":["C:/Users/Julia/Desktop/permissioning-smart-contracts-master/permissioning-smart-contracts-master/src/util/enodetools.ts"],"names":["leftPad","require","padIpv6","enodeToParams","enodeURL","enodeHigh","enodeLow","ip","port","extraParams","Map","node","URL","protocol","username","length","slice","parseHostname","hostname","searchParams","forEach","value","name","set","toLowerCase","err","paramsToIdentifier","stringHostname","ipv6","getHexIpv6","getHexIpv4","stringIp","splitIp","split","toHex","stringIpv6","join","number","num","Number","toString","buildEnode","identifierToParams","identifier","identifierToEnodeHighAndLow","isValidEnode","str","Object","values","some","isEqual","node1","node2"],"mappings":"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","sourcesContent":["const leftPad = require('left-pad');\nconst padIpv6 = require('pad-ipv6');\n\nexport type Enode = {\n  enodeHigh: string;\n  enodeLow: string;\n  ip: string;\n  port: string;\n};\n\nexport const enodeToParams = (enodeURL: string) => {\n  let enodeHigh = '';\n  let enodeLow = '';\n  let ip = '';\n  let port = '';\n  let extraParams = new Map();\n\n  try {\n    const node = new URL(enodeURL);\n    if (node.protocol === 'enode:') {\n      // Change to Special protocol in order to parse the fields properly\n      node.protocol = 'https';\n\n      if (node.username.length === 128) {\n        enodeHigh = '0x' + node.username.slice(0, 64);\n        enodeLow = '0x' + node.username.slice(64);\n      }\n      ip = parseHostname(node.hostname);\n      port = node.port;\n\n      node.searchParams.forEach((value, name, searchParams) => {\n        extraParams.set(name.toLowerCase(), value);\n      });\n    }\n  } catch (err) {}\n\n  return {\n    enodeHigh,\n    enodeLow,\n    ip,\n    port,\n    extraParams\n  };\n};\n\nexport const paramsToIdentifier = ({\n  enodeHigh,\n  enodeLow,\n  ip,\n  port\n}: {\n  enodeHigh: string;\n  enodeLow: string;\n  ip: string;\n  port: string;\n}) => {\n  return `${enodeHigh}_${enodeLow}_${ip}_${port}`;\n};\n\nfunction parseHostname(stringHostname: string) {\n  if (stringHostname[0] === '[') {\n    const ipv6 = stringHostname.slice(1, -1);\n    return getHexIpv6(ipv6);\n  }\n  return getHexIpv4(stringHostname);\n}\n\nfunction getHexIpv4(stringIp: string) {\n  const splitIp = stringIp.split('.');\n  return `0x00000000000000000000ffff${toHex(splitIp[0])}${toHex(splitIp[1])}${toHex(splitIp[2])}${toHex(splitIp[3])}`;\n}\n\nfunction getHexIpv6(stringIpv6: string) {\n  const ipv6 = padIpv6(stringIpv6)\n    .split(':')\n    .join('');\n  return '0x' + ipv6;\n}\n\nfunction toHex(number: string) {\n  const num = Number(number).toString(16);\n  return leftPad(num, 2, '0');\n}\n\nexport const buildEnode = (enodeHigh: string, enodeLow: string) => {\n  return `${enodeHigh.slice(2)}${enodeLow.slice(2)}`;\n};\n\nexport const identifierToParams = (identifier: string) => {\n  const [enodeHigh, enodeLow, ip, port] = identifier.split('_');\n  return {\n    enodeHigh,\n    enodeLow,\n    ip,\n    port,\n    identifier\n  };\n};\n\nexport const identifierToEnodeHighAndLow = (identifier: string) => {\n  if (identifier) {\n    const [enodeHigh, enodeLow] = identifier.split('_');\n    return `${enodeHigh}${enodeLow}`;\n  }\n  return '';\n};\n\nexport const isValidEnode = (str: string) => {\n  return !Object.values(enodeToParams(str)).some(value => !value);\n};\n\nexport const isEqual = (node1: Enode, node2: Enode) => {\n  return (\n    node1.enodeHigh.toLowerCase() === node2.enodeHigh.toLowerCase() &&\n    node1.enodeLow.toLowerCase() === node2.enodeLow.toLowerCase() &&\n    node1.ip === node2.ip &&\n    node1.port === node2.port\n  );\n};\n"]},"metadata":{},"sourceType":"module"}