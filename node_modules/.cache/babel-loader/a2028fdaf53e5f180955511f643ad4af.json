{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia\\\\Desktop\\\\permissioning-smart-contracts-master\\\\permissioning-smart-contracts-master\\\\src\\\\context\\\\toasts.tsx\";\n// Libs\nimport React, { useContext, useState, createContext, useMemo, useCallback } from 'react'; // Hooks\n\nimport useTimeout from './useTimeout';\nconst ToastContext = createContext({});\n/**\n * Provider for the current state of the toasts\n * @param {Object} props Props given to the ToastProvider\n * @return The provider with the following value:\n *  - toasts: Array of opened toasts\n *  - setToasts: setter of toasts\n */\n\nexport const ToastProvider = props => {\n  const [toasts, setToasts] = useState([]);\n  const value = useMemo(() => ({\n    toasts,\n    setToasts\n  }), [toasts, setToasts]);\n  return /*#__PURE__*/React.createElement(ToastContext.Provider, Object.assign({\n    value: value\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 10\n    }\n  }));\n};\n/**\n * Synchronize with the toasts state\n * @return {Object} The toasts informations and the associated setters:\n *  - toasts: Array of opened toasts\n *  - openToast: Function that creates a toast and deletes it later\n *  - updateToast: Function that updates a toast\n *  - closeToast: Function that deletes the toast\n */\n\nexport const useToast = () => {\n  const context = useContext(ToastContext);\n\n  if (!context) {\n    throw new Error('useToast must be used within a DataProvider.');\n  }\n\n  const {\n    addTimeout\n  } = useTimeout();\n  const {\n    toasts: toastsOpt,\n    setToasts\n  } = context;\n  const toasts = toastsOpt;\n  const closeToast = useCallback(targetedIdentifier => () => {\n    setToasts(toasts => {\n      const updatedToasts = [...toasts];\n      const index = updatedToasts.findIndex(({\n        identifier\n      }) => identifier === targetedIdentifier);\n      updatedToasts.splice(index, 1);\n      return updatedToasts;\n    });\n  }, [setToasts]);\n  const openToast = useCallback((identifier, status, message, secondaryMessage, timeout = 5000) => {\n    const timeoutId = setTimeout(closeToast(identifier), timeout);\n    closeToast(identifier)();\n    setToasts(toasts => [...toasts, {\n      identifier,\n      status,\n      message,\n      secondaryMessage\n    }]);\n    addTimeout(timeoutId);\n  }, [addTimeout, closeToast, setToasts]);\n  const updateToast = useCallback((targetedIdentifier, status, message, secondaryMessage, timeout = 5000) => {\n    setToasts(toasts => {\n      const updatedToasts = [...toasts];\n      const index = updatedToasts.findIndex(({\n        identifier\n      }) => identifier === targetedIdentifier);\n\n      if (index !== -1) {\n        updatedToasts.splice(index, 1);\n      }\n\n      return [...updatedToasts, {\n        identifier: targetedIdentifier,\n        status,\n        message,\n        secondaryMessage\n      }];\n    });\n    const timeoutId = setTimeout(closeToast(targetedIdentifier), timeout);\n    addTimeout(timeoutId);\n  }, [addTimeout, closeToast, setToasts]);\n  return {\n    toasts,\n    openToast,\n    updateToast,\n    closeToast\n  };\n};","map":{"version":3,"sources":["C:/Users/Julia/Desktop/permissioning-smart-contracts-master/permissioning-smart-contracts-master/src/context/toasts.tsx"],"names":["React","useContext","useState","createContext","useMemo","useCallback","useTimeout","ToastContext","ToastProvider","props","toasts","setToasts","value","useToast","context","Error","addTimeout","toastsOpt","closeToast","targetedIdentifier","updatedToasts","index","findIndex","identifier","splice","openToast","status","message","secondaryMessage","timeout","timeoutId","setTimeout","updateToast"],"mappings":"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","sourcesContent":["// Libs\nimport React, { useContext, useState, createContext, useMemo, useCallback } from 'react';\n// Hooks\nimport useTimeout from './useTimeout';\n\nexport type Toast = {\n  identifier: string;\n  status: string;\n  message: string;\n  secondaryMessage?: string;\n};\n\nconst ToastContext = createContext<{\n  toasts?: Toast[];\n  setToasts?: React.Dispatch<React.SetStateAction<Toast[]>>;\n}>({});\n\n/**\n * Provider for the current state of the toasts\n * @param {Object} props Props given to the ToastProvider\n * @return The provider with the following value:\n *  - toasts: Array of opened toasts\n *  - setToasts: setter of toasts\n */\nexport const ToastProvider: React.FC<{}> = props => {\n  const [toasts, setToasts] = useState<Toast[]>([]);\n\n  const value = useMemo(() => ({ toasts, setToasts }), [toasts, setToasts]);\n\n  return <ToastContext.Provider value={value} {...props} />;\n};\n\n/**\n * Synchronize with the toasts state\n * @return {Object} The toasts informations and the associated setters:\n *  - toasts: Array of opened toasts\n *  - openToast: Function that creates a toast and deletes it later\n *  - updateToast: Function that updates a toast\n *  - closeToast: Function that deletes the toast\n */\nexport const useToast = () => {\n  const context = useContext(ToastContext);\n  if (!context) {\n    throw new Error('useToast must be used within a DataProvider.');\n  }\n\n  const { addTimeout } = useTimeout();\n\n  const { toasts: toastsOpt, setToasts } = context;\n  const toasts = toastsOpt!;\n\n  const closeToast = useCallback(\n    (targetedIdentifier: string) => () => {\n      setToasts!(toasts => {\n        const updatedToasts = [...toasts];\n        const index = updatedToasts.findIndex(({ identifier }) => identifier === targetedIdentifier);\n        updatedToasts.splice(index, 1);\n        return updatedToasts;\n      });\n    },\n    [setToasts]\n  );\n\n  const openToast = useCallback(\n    (identifier: string, status: string, message: string, secondaryMessage?: string, timeout: number = 5000) => {\n      const timeoutId = setTimeout(closeToast(identifier), timeout);\n      closeToast(identifier)();\n      setToasts!(toasts => [...toasts, { identifier, status, message, secondaryMessage }]);\n      addTimeout(timeoutId);\n    },\n    [addTimeout, closeToast, setToasts]\n  );\n\n  const updateToast = useCallback(\n    (\n      targetedIdentifier: string,\n      status: string,\n      message: string,\n      secondaryMessage?: string,\n      timeout: number = 5000\n    ) => {\n      setToasts!(toasts => {\n        const updatedToasts = [...toasts];\n        const index = updatedToasts.findIndex(({ identifier }) => identifier === targetedIdentifier);\n        if (index !== -1) {\n          updatedToasts.splice(index, 1);\n        }\n        return [\n          ...updatedToasts,\n          {\n            identifier: targetedIdentifier,\n            status,\n            message,\n            secondaryMessage\n          }\n        ];\n      });\n      const timeoutId = setTimeout(closeToast(targetedIdentifier), timeout);\n      addTimeout(timeoutId);\n    },\n    [addTimeout, closeToast, setToasts]\n  );\n\n  return {\n    toasts,\n    openToast,\n    updateToast,\n    closeToast\n  };\n};\n"]},"metadata":{},"sourceType":"module"}